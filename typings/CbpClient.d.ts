import * as jbdt from './CbpDataTypes';
import { CbpLogger } from './CbpLogger';
import { CbpBrowser } from './CbpBrowser';
import { CbpDesktop } from './CbpDesktop';
import { CbpServices } from './CbpServices';
import { CbpClipboard } from './CbpClipboard';
import { ExtStartArgs } from './CbpDataTypes';
export * from './CbpDataTypes';
export * from './CbpTab';
export * from './CbpTabMouse';
export * from './CbpTabKeyboard';
export * from './CbpLogger';
export * from './CbpBrowser';
export * from './CbpDesktop';
export * from './CbpServices';
export * from './CbpClipboard';
export * from './CbpUtils';
export default class CbpClient {
    private wsclient;
    private callbacks;
    private callbackUids;
    private readonly botName;
    private onConsoleInput?;
    onQueue?: (args: jbdt.ExtStartArgs) => boolean;
    onWillClose?: () => void;
    onSystemMessage?: (msg: string) => void;
    readonly logger: CbpLogger;
    readonly clipboard: CbpClipboard;
    readonly services: CbpServices;
    readonly desktops: {
        [id: number]: CbpDesktop;
    };
    readonly anotherBotLogStreams: {
        [botName: string]: Function;
    };
    private browser?;
    constructor(botName?: string);
    private getBotNameFromPackage;
    exec(cmd: string): Promise<string>;
    pause(sec?: number): Promise<boolean>;
    disconnect(): Promise<void>;
    isConnected(): boolean;
    private checkConnection;
    getUserSettings(): jbdt.IUserSettings;
    getBrowser(browserPars?: Partial<jbdt.BrowserPars>): Promise<CbpBrowser>;
    connect(cbpAppUrl?: string): Promise<void>;
    private handleIncomingMsg;
    getDesktopList(): Promise<Array<CbpDesktop>>;
    findImagesBase64(srcImgFileName: string, imgBase64: jbdt.ImageBase64): Promise<Array<jbdt.ImagePosition>>;
    findImagesByName(srcImgFileName: string, imgName: string): Promise<Array<jbdt.ImagePosition>>;
    imageOperation(data: jbdt.IImageOperationData): Promise<string>;
    drawRect(imgName: string, pos: Array<jbdt.ImagePosition>, thick?: number, clr?: number): Promise<string>;
    waitForSec(sec: number): Promise<void>;
    getBotData(): Promise<jbdt.ClientBotData>;
    readText(imgName: string, lang?: string): Promise<string>;
    sendAsyncNoData(action: string): Promise<any>;
    sendAsync<T>(action: string, data?: T): Promise<any>;
    private send;
    startAnotherBot(data: jbdt.IStartAnotherBot): Promise<string>;
    checkAccessibilityPermissions(): Promise<boolean>;
    getExtStartArgs(): ExtStartArgs | undefined;
}
